name: Java CI with Gradle

on:
  push:
    branches:
      - ci-cd
      - main
  pull_request:
    branches:
      - ci-cd
      - main

permissions:
  contents: read

jobs:
  build-docker-image:
    runs-on: self-hosted  # 기존의 self-hosted 러너를 사용
    steps:
      - uses: actions/checkout@v3
      # 1. Java 17 세팅
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 2. Spring Boot 애플리케이션 빌드

      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: clean bootJar

      # 3. Docker 이미지 빌드.
      - name: docker image build
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/big-brother-demo:latest .

      # 4. DockerHub 로그인.
      - name: docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # 5. Docker Hub 이미지 푸시
      - name: docker Hub push
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/big-brother-demo

  ## 푸시한 이미지를 EC2에서 가져와 실행하는 과정
  run-docker-image-on-ec2:
    needs: build-docker-image
    runs-on: self-hosted  # 동일한 self-hosted 러너에서 실행
    steps:
      # 1. 최신 이미지를 가져온다.
      - name: docker pull
        run: sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/big-brother-demo

      # 2. 기존의 컨테이너를 중지시킨다.
      - name: docker stop container
        # 모든 컨테이너를 중지
        run: sudo docker stop $(sudo docker ps -q) 2>/dev/null || true

      # 3. 최신 이미지를 컨테이너화하여 실행시킨다.
      - name: docker run new container
        run: sudo docker run --name github-actions-demo --rm -d -p 8080:8080 --env-file /home/ubuntu/env1.list ${{ secrets.DOCKERHUB_USERNAME }}/big-brother-demo

      # 4. 미사용 이미지를 정리한다.
      - name: delete old docker image
        run: sudo docker system prune -f
